---
- hosts: all
  any_errors_fatal: true
  vars:
    http_port: 80
    max_clients: 200
  remote_user: vagrant
  become_user: root
  vars_files:
    - common-vars.yml
  environment:
    LD_LIBRARY_PATH: '{{ luna_libs_dir }}:{{ ansible_env.LD_LIBRARY_PATH | default("") }}'
    PYENV_ROOT: '{{ pyenv_root }}'

  tasks:
  - name: make the partition script executable
    file:
      path: "{{ ansible_env.HOME }}/make_partition.sh"
      mode: 0777

  - name: add a bigger home partition
    become: true
    shell: ./make_partition.sh
    args:
      executable: /bin/bash

  - name: install apt packages
    become: true
    apt: name={{item}} state=present
    with_items:
      - wget
      - build-essential
      - libffi-dev
      - libgmp-dev
      - xz-utils
      - zlib1g-dev
      - git
      - gnupg
      - libzmq3-dev
      - libpng-dev
      - openssl
      - python-setuptools
      - libssl-dev
      - libtinfo-dev
      - pkg-config
      - alex

  - name: install pip
    become: true
    easy_install:
      name: pip
      state: latest

  - name: set git user name
    shell: git config --global user.name lunalangCI
    args:
      executable: /bin/bash

  - name: set git user email
    shell: git config --global user.email ci@luna-lang.org
    args:
      executable: /bin/bash

  - name: download luna manager
    get_url:
      url: '{{ luna_manager_url }}'
      dest: '{{ home }}'
      mode: 0777

  - name: run luna manager to download LS
    command: ./luna-manager develop luna-studio --verbose

  - name: clone luna manager
    git:
      repo: '{{ luna_repo_path }}'
      dest: '{{ luna_manager_dir }}'
      clone: yes

  - name: ensure execute permissions on luna-shell.sh
    file:
      path: '{{ luna_studio_dir }}/luna-shell.sh'
      mode: 0777

  - name: set python version with pyenv
    command: "{{ pyenv_bin }} local 3.6.2"


  - name: install python packages
    shell: '{{ source_env }} && pip install boto3 requests pyyaml --user'
    args:
      executable: /bin/bash
      chdir: '{{ luna_manager_dir }}'

  - name: build luna manager
    shell: '{{ source_env}} && stack install'
    args:
      executable: /bin/bash
      chdir: '{{ luna_manager_dir }}'

  - name: ensure the make-package.sh file exists
    file:
      path: '{{ luna_manager_dir }}/make-package.sh'
      state: touch
      mode: 0777

  - name: create a helper runner script
    blockinfile:
      path: '{{ luna_manager_dir }}/make-package.sh'
      marker: ''
      block: |
        #!/bin/bash
        {{ source_env }}
        pushd {{ luna_manager_dir }}
        python deploy/main.py {{ luna_studio_dir }}
        pushd
